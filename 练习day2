//3.4
#include <chrono>
#include <iostream>
using namespace std;


int main() {
    int hours,minutes,days,lastseconds;//符号常量(是什么）表示？

    // 使用const定义符号常量
    const int SECONDS_PER_MINUTE = 60;
    const int MINUTES_PER_HOUR = 60;
    const int HOURS_PER_DAY = 24;

    long seconds;//存储为long类型？
    cin>>seconds;//如何以整数方式输入变量？


    days=seconds/(HOURS_PER_DAY*MINUTES_PER_HOUR*SECONDS_PER_MINUTE);
    seconds%=(HOURS_PER_DAY*MINUTES_PER_HOUR*SECONDS_PER_MINUTE);

    hours=seconds/MINUTES_PER_HOUR/SECONDS_PER_MINUTE;
    seconds=seconds%(MINUTES_PER_HOUR*SECONDS_PER_MINUTE);

    minutes=seconds/SECONDS_PER_MINUTE;
    lastseconds=seconds%SECONDS_PER_MINUTE;


    cout<<"Enter the number of seconds:"<<seconds<<endl;
    cout<<days<<" "<<hours<<" "<<minutes<< " "<<lastseconds<<endl;
    return 0;
}


//3.7
#include <chrono>
#include <iostream>
#include<math.h>
using namespace std;


int main() {
    double ecost,acost;
    const double eatrans1=0.6214;// 1英里 = 0.621371公里
    const double eatrans2=3.875;// 1加仑 = 3.875升
    cin>>ecost;
    cout<<"Europe cost"<<ecost<<endl;

    acost=(100/ecost)*eatrans1*eatrans2;
    cout<<" acost = "<<acost<<"mpg\n"<<"ecost = "<<ecost<<"l/100km"<<endl;
    return 0;
}

//sizeof运算符返回类型或数据对象的长度（单位为字节）
//只有在定义数组时才能使用初始化，此后就不能使用了，也不能将一个数组赋给另一个数组：
//但C++11中的列表初始化新增了一些功能。首先，初始化数组时，可省略等号（=）：其次，可不在大括号内包含任何东西，这将把所有元素都设置为0,

//空字符被写作\0，其ASCII码为0，用来标记字符串的结尾,字符串以'\0'结尾
//用引号""括起的字符串隐式地包括结尾的空字符，因此不用显式地包括它
//在确定存储字符串所需的最短数组时，别忘了将结尾的空字符计算在内。

//sizeof运算符指出整个数组的长度：15字节，但strlen( )函数返回的是存储在数组中的字符串的长度，而不是数组本身的长度。另外，strlen( )只计算可见的字符，而不把空字符计算在内。因此，对于Basicman，返回的值为8，而不是9。如果cosmic是字符串，则要存储该字符串，数组的长度不能短于strlen（cosmic）+1。

//cin后用get()把换行符拿走

//string对象和字符数组之间的主要区别是，可以将string对象声明为简单变量，而不是数组：
//不能将一个数组赋给另一个数组，但可以将一个string对象赋给另一个string对象：
//转义序列\"表示双引号，而不是字符串结尾。


//4.5
#include <chrono>
#include <iostream>
#include<math.h>
#include <iomanip> // 用于设置浮点数的输出格式
using namespace std;

struct CandyBar {
    string  brand;//不是char!
    double  weight;
    int  calorie;
};


int main() {
    CandyBar snack = {"Mocha Munch",2.3,350 };//要加=
    cout<<snack.brand<<snack.weight<<snack.calorie<<endl;
    return 0;
}

//4.6
#include <chrono>
#include <iostream>
#include<math.h>
#include <iomanip> // 用于设置浮点数的输出格式
using namespace std;

struct CandyBar {
    string  brand;//不是char!
    double  weight;
    int  calorie;
};


int main() {
    //CandyBar snack = {"Mocha Munch",2.3,350 };//要加=
    //cout<<snack.brand<<snack.weight<<snack.calorie<<endl;
    CandyBar snack[3] = {
        {"Mocha Munch", 2.3, 350},
        {"Strawberry Shortcake", 1.5, 200},
        {"Chocolate Fudge", 3.0, 500}
    };

    // 显示每个CandyBar的内容
    for (int i = 0; i < 3; ++i) {
        cout << "Brand: " << snack[i].brand << endl;
        cout << "Weight: " << snack[i].weight << " oz" << endl;
        cout << "Calories: " << snack[i].calorie << endl;
        cout << std::endl; // 添加空行以便清晰显示每个CandyBar的内容
    }
    return 0;
}

//4.9
#include <chrono>
#include <iostream>
#include<math.h>
#include <iomanip> // 用于设置浮点数的输出格式
using namespace std;

struct CandyBar {
    string  brand;//不是char!
    double  weight;
    int  calorie;
};

// 自定义函数来显示CandyBar的内容
void displayCandyBar(const CandyBar& candyBar) {
    cout << "Brand: " << candyBar.brand
              << ", Weight: " << candyBar.weight
              << ", Calories: " << candyBar.calorie
              << endl;
}

int main() {
    const int numBars=3;
    CandyBar *candyBars=new CandyBar[numBars];

    // 初始化CandyBar数组
    candyBars[0] = {"Mocha Munch", 2.3, 350};
    candyBars[1] = {"Strawberry Shortcake", 1.5, 200};
    candyBars[2] = {"Chocolate Fudge", 3.0, 500};

    // 显示每个CandyBar的内容
    for (int i = 0; i < numBars; ++i) {
        displayCandyBar(candyBars[i]);
    }

    // 使用delete[]释放动态分配的内存
    delete[] candyBars;

    return 0;
}

//4.7
#include <chrono>
#include <iostream>
#include<math.h>
#include <iomanip> // 用于设置浮点数的输出格式
using namespace std;

struct Pizza {
    string  brand;
    double dia ;
    double weight;
};



int main() {
    Pizza pizza;
    cout<<"Please import brand:"<<endl;
    getline(cin,pizza.brand);
    cout<<"Please import dia:"<<endl;
    cin>>pizza.dia;
    cout<<"Please import weight:"<<endl;
    cin>>pizza.weight;
    // 显示披萨饼的信息
    std::cout << "披萨饼信息如下：" << std::endl;
    std::cout << "公司名称: " << pizza.brand << std::endl;
    std::cout << "直径: " << pizza.dia << " 英寸" << std::endl;
    std::cout << "重量: " << pizza.weight << " 磅" << std::endl;

    
    return 0;
}

//4.8
#include <chrono>
#include <iostream>
#include<math.h>
#include <iomanip> // 用于设置浮点数的输出格式
using namespace std;

struct Pizza {
    string  brand;
    double dia ;
    double weight;
};



int main() {
    Pizza* pizza = new Pizza;  //之后.改为->
    cout<<"Please import dia:"<<endl;
    cin>>pizza->dia;
    // 清除输入缓冲区中的换行符 ，不清除会直接输出
    cin.ignore(numeric_limits<streamsize>::max(), '\n');


    cout<<"Please import brand:"<<endl;
    getline(cin,pizza->brand);

    cout<<"Please import weight:"<<endl;
    cin>>pizza->weight;
    // 显示披萨饼的信息
    std::cout << "披萨饼信息如下：" << std::endl;
    std::cout << "公司名称: " << pizza->brand << std::endl;
    std::cout << "直径: " << pizza->dia << " 英寸" << std::endl;
    std::cout << "重量: " << pizza->weight << " 磅" << std::endl;


    return 0;
}
